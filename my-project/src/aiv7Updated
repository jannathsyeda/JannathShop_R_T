import React, { createContext, useContext, useReducer, useState } from 'react';

// Sample product data
const PRODUCTS = [
  {
    id: 1,
    name: "Gradient Graphic T-shirt",
    price: 145,
    rating: 4,
    maxRating: 5,
    stock: 212,
    image: "/api/placeholder/250/250",
    category: "t-shirt"
  },
  {
    id: 2,
    name: "Polo with Tipping Details",
    price: 180,
    rating: 1,
    maxRating: 5,
    stock: 320,
    image: "/api/placeholder/250/250",
    category: "polo"
  },
  {
    id: 3,
    name: "Black Striped T-shirt",
    price: 120,
    originalPrice: 160,
    rating: 3,
    maxRating: 5,
    stock: 420,
    image: "/api/placeholder/250/250",
    category: "t-shirt"
  },
  {
    id: 4,
    name: "Skinny Fit Jeans",
    price: 240,
    originalPrice: 260,
    rating: 4,
    maxRating: 5,
    stock: 20,
    image: "/api/placeholder/250/250",
    category: "jeans"
  },
  {
    id: 5,
    name: "Checkered Shirt",
    price: 180,
    rating: 4,
    maxRating: 5,
    stock: 20,
    image: "/api/placeholder/250/250",
    category: "shirt"
  },
  {
    id: 6,
    name: "Sleeve Striped T-shirt",
    price: 130,
    originalPrice: 160,
    rating: 4,
    maxRating: 5,
    stock: 20,
    image: "/api/placeholder/250/250",
    category: "t-shirt"
  }
];

// Products Context
const ProductsContext = createContext();

const productsReducer = (state, action) => {
  switch (action.type) {
    case 'UPDATE_STOCK':
      return state.map(product =>
        product.id === action.payload.id
          ? { ...product, stock: Math.max(0, action.payload.stock) }
          : product
      );
    case 'DECREASE_STOCK':
      return state.map(product =>
        product.id === action.payload.id
          ? { ...product, stock: Math.max(0, product.stock - action.payload.quantity) }
          : product
      );
    case 'INCREASE_STOCK':
      return state.map(product =>
        product.id === action.payload.id
          ? { ...product, stock: product.stock + action.payload.quantity }
          : product
      );
    default:
      return state;
  }
};

const ProductsProvider = ({ children }) => {
  const [products, dispatch] = useReducer(productsReducer, PRODUCTS);

  const updateStock = (id, stock) => {
    dispatch({ type: 'UPDATE_STOCK', payload: { id, stock } });
  };

  const decreaseStock = (id, quantity) => {
    dispatch({ type: 'DECREASE_STOCK', payload: { id, quantity } });
  };

  const increaseStock = (id, quantity) => {
    dispatch({ type: 'INCREASE_STOCK', payload: { id, quantity } });
  };

  const getProduct = (id) => {
    return products.find(product => product.id === id);
  };

  return (
    <ProductsContext.Provider value={{
      products,
      updateStock,
      decreaseStock,
      increaseStock,
      getProduct
    }}>
      {children}
    </ProductsContext.Provider>
  );
};

const useProducts = () => {
  const context = useContext(ProductsContext);
  if (!context) {
    throw new Error('useProducts must be used within a ProductsProvider');
  }
  return context;
};

// Cart Context
const CartContext = createContext();

const cartReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TO_CART':
      const existingItem = state.items.find(item => 
        item.id === action.payload.id && 
        item.size === action.payload.size && 
        item.color === action.payload.color
      );
      
      // Prevent adding if stock is 0
      if (action.payload.stock <= 0) {
        return state;
      }

      if (existingItem) {
        return {
          ...state,
          items: state.items.map(item =>
            item.id === action.payload.id && 
            item.size === action.payload.size && 
            item.color === action.payload.color
              ? { ...item, quantity: item.quantity + 1 }
              : item
          )
        };
      }
      
      return {
        ...state,
        items: [...state.items, { ...action.payload, quantity: 1 }]
      };
      
    case 'REMOVE_FROM_CART':
      return {
        ...state,
        items: state.items.filter(item => 
          !(item.id === action.payload.id && 
            item.size === action.payload.size && 
            item.color === action.payload.color)
        )
      };
      
    case 'UPDATE_QUANTITY':
      return {
        ...state,
        items: state.items.map(item => {
          if (
            item.id === action.payload.id &&
            item.size === action.payload.size &&
            item.color === action.payload.color
          ) {
            // Get current stock for this product
            const currentStock = action.payload.currentStock || item.stock;
            // Prevent exceeding stock and going below 1
            const newQuantity = Math.max(1, Math.min(action.payload.quantity, currentStock));
            return { ...item, quantity: newQuantity };
          }
          return item;
        }).filter(item => item.quantity > 0)
      };
      
    case 'APPLY_DISCOUNT':
      return {
        ...state,
        discount: action.payload
      };
      
    default:
      return state;
  }
};

// Cart Provider Component
const CartProvider = ({ children }) => {
  const [cartState, dispatch] = useReducer(cartReducer, {
    items: [],
    discount: 0
  });

  const addToCart = (product, size = "Medium", color = "Default") => {
    dispatch({
      type: 'ADD_TO_CART',
      payload: { ...product, size, color }
    });
  };

  const removeFromCart = (id, size, color) => {
    dispatch({
      type: 'REMOVE_FROM_CART',
      payload: { id, size, color }
    });
  };

  const updateQuantity = (id, size, color, quantity, currentStock) => {
    dispatch({
      type: 'UPDATE_QUANTITY',
      payload: { id, size, color, quantity, currentStock }
    });
  };

  const applyDiscount = (discount) => {
    dispatch({
      type: 'APPLY_DISCOUNT',
      payload: discount
    });
  };

  const getCartTotal = () => {
    return cartState.items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getCartCount = () => {
    return cartState.items.reduce((total, item) => total + item.quantity, 0);
  };

  return (
    <CartContext.Provider value={{
      cartState,
      addToCart,
      removeFromCart,
      updateQuantity,
      applyDiscount,
      getCartTotal,
      getCartCount
    }}>
      {children}
    </CartContext.Provider>
  );
};

// Hook to use cart context
const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

// Star Rating Component
const StarRating = ({ rating, maxRating = 5 }) => {
  return (
    <div className="flex items-center">
      {[...Array(maxRating)].map((_, index) => (
        <svg
          key={index}
          className={`w-4 h-4 ${
            index < rating ? 'text-yellow-400' : 'text-gray-300'
          }`}
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </svg>
      ))}
      <span className="ml-1 text-sm text-gray-600">{rating}/{maxRating}</span>
    </div>
  );
};

// Product Card Component with Stock Management
const ProductCard = ({ product }) => {
  const { cartState, addToCart, removeFromCart } = useCart();
  const { decreaseStock, increaseStock, getProduct } = useProducts();

  // Get real-time product data
  const currentProduct = getProduct(product.id);
  
  // Check if product is in cart (checking for default size/color combination)
  const cartItem = cartState.items.find(item => 
    item.id === product.id && 
    item.size === "Medium" && 
    item.color === "Default"
  );

  const isInCart = !!cartItem;

  const handleAddToCart = () => {
    if (currentProduct.stock > 0) {
      addToCart(currentProduct, "Medium", "Default");
      decreaseStock(product.id, 1);
    }
  };

  const handleRemoveFromCart = () => {
    if (cartItem) {
      removeFromCart(product.id, "Medium", "Default");
      increaseStock(product.id, cartItem.quantity);
    }
  };

  return (
    <div className="bg-gray-100 rounded-lg p-4">
      <div className="aspect-square bg-white rounded-lg mb-4 flex items-center justify-center">
        <div className="w-32 h-32 bg-gray-200 rounded flex items-center justify-center text-gray-500">
          {product.name.split(' ')[0]}
        </div>
      </div>
      
      <h3 className="font-semibold text-lg mb-2">{product.name}</h3>
      
      <div className="mb-2">
        <StarRating rating={product.rating} maxRating={product.maxRating} />
        <span className={`text-sm ml-2 ${currentProduct.stock === 0 ? 'text-red-500' : 'text-gray-500'}`}>
          ({currentProduct.stock} pcs left)
        </span>
      </div>
      
      <div className="flex items-center mb-4">
        <span className="text-xl font-bold">${product.price}</span>
        {product.originalPrice && (
          <span className="text-gray-500 line-through ml-2">${product.originalPrice}</span>
        )}
      </div>
      
      <button
        onClick={isInCart ? handleRemoveFromCart : handleAddToCart}
        disabled={!isInCart && currentProduct.stock === 0}
        className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
          currentProduct.stock === 0 && !isInCart
            ? 'bg-gray-400 text-gray-600 cursor-not-allowed'
            : isInCart
            ? 'bg-red-600 hover:bg-red-700 text-white'
            : 'bg-gray-800 hover:bg-gray-900 text-white'
        }`}
      >
        {currentProduct.stock === 0 && !isInCart 
          ? 'Out of Stock'
          : isInCart 
          ? 'Remove from Cart' 
          : 'Add to Cart'
        }
      </button>
    </div>
  );
};

// Product List Component with Real-time Updates
const ProductList = () => {
  const [sortBy, setSortBy] = useState('Most Popular');
  const { products } = useProducts();
  const [sortedProducts, setSortedProducts] = useState(products);

  React.useEffect(() => {
    let sorted = [...products];
    switch (sortBy) {
      case 'Most Popular':
        sorted.sort((a, b) => b.rating - a.rating);
        break;
      case 'Price: Low to High':
        sorted.sort((a, b) => a.price - b.price);
        break;
      case 'Price: High to Low':
        sorted.sort((a, b) => b.price - a.price);
        break;
      default:
        break;
    }
    setSortedProducts(sorted);
  }, [products, sortBy]);

  const handleSortChange = (e) => {
    setSortBy(e.target.value);
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Your Products</h2>
        <div className="flex items-center">
          <label htmlFor="sort" className="mr-2 text-sm">Sort by:</label>
          <select
            id="sort"
            value={sortBy}
            onChange={handleSortChange}
            className="border border-gray-300 rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option>Most Popular</option>
            <option>Price: Low to High</option>
            <option>Price: High to Low</option>
            <option>Newest</option>
          </select>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {sortedProducts.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

// Cart Item Component with Stock Management
const CartItem = ({ item }) => {
  const { updateQuantity, removeFromCart } = useCart();
  const { increaseStock, decreaseStock, getProduct } = useProducts();

  // Get current product stock
  const currentProduct = getProduct(item.id);

  const handleQuantityChange = (newQuantity) => {
    const quantityDiff = newQuantity - item.quantity;
    
    if (quantityDiff > 0) {
      // Increasing quantity - check if we have enough stock
      if (currentProduct.stock >= quantityDiff) {
        updateQuantity(item.id, item.size, item.color, newQuantity, currentProduct.stock);
        decreaseStock(item.id, quantityDiff);
      }
    } else if (quantityDiff < 0) {
      // Decreasing quantity - return stock
      updateQuantity(item.id, item.size, item.color, newQuantity, currentProduct.stock);
      increaseStock(item.id, Math.abs(quantityDiff));
    }
  };

  const handleRemove = () => {
    removeFromCart(item.id, item.size, item.color);
    increaseStock(item.id, item.quantity);
  };

  // Calculate available quantity (current quantity + available stock)
  const maxQuantity = item.quantity + currentProduct.stock;

  return (
    <div className="flex items-center py-4 border-b border-gray-200">
      <div className="w-12 h-12 bg-blue-200 rounded mr-4 flex items-center justify-center">
        <div className="w-8 h-8 bg-blue-400 rounded"></div>
      </div>
      
      <div className="flex-1">
        <h4 className="font-semibold text-sm">{item.name}</h4>
        <p className="text-xs text-gray-500">Size: {item.size}</p>
        <p className="text-xs text-gray-500">Color: {item.color}</p>
        <p className="text-xs text-gray-500">Available: {currentProduct.stock + item.quantity}</p>
      </div>
      
      <div className="text-right">
        <div className="font-bold">${item.price}</div>
        <div className="flex items-center mt-2">
          <button
            onClick={() => handleQuantityChange(item.quantity - 1)}
            disabled={item.quantity <= 1}
            className="w-6 h-6 border border-gray-300 rounded flex items-center justify-center text-sm hover:bg-gray-100 disabled:opacity-50"
          >
            −
          </button>
          <span className="mx-2 text-sm">{item.quantity}</span>
          <button
            onClick={() => handleQuantityChange(item.quantity + 1)}
            disabled={currentProduct.stock === 0}
            className="w-6 h-6 border border-gray-300 rounded flex items-center justify-center text-sm hover:bg-gray-100 disabled:opacity-50"
          >
            +
          </button>
        </div>
      </div>
      
      <button
        onClick={handleRemove}
        className="ml-4 text-gray-400 hover:text-red-500"
      >
        ×
      </button>
    </div>
  );
};

// Cart List Component
const CartList = () => {
  const { cartState, getCartTotal, applyDiscount } = useCart();
  const [promoCode, setPromoCode] = useState('');

  const subtotal = getCartTotal();
  const discountAmount = (subtotal * cartState.discount) / 100;
  const deliveryFee = 15;
  const total = subtotal - discountAmount + deliveryFee;

  const handleApplyPromo = () => {
    if (promoCode.toLowerCase() === 'save20') {
      applyDiscount(20);
    } else if (promoCode.toLowerCase() === 'save10') {
      applyDiscount(10);
    }
    setPromoCode('');
  };

  return (
    <div className="bg-white rounded-lg p-6 h-fit">
      <h3 className="text-xl font-bold mb-4">YOUR CART</h3>
      
      <div className="space-y-2">
        {cartState.items.length === 0 ? (
          <p className="text-gray-500 text-center py-4">Your cart is empty</p>
        ) : (
          cartState.items.map((item, index) => (
            <CartItem key={`${item.id}-${item.size}-${item.color}-${index}`} item={item} />
          ))
        )}
      </div>
      
      {cartState.items.length > 0 && (
        <div className="mt-6 pt-4 border-t border-gray-200">
          <h4 className="font-bold mb-4">Order Summary</h4>
          
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>Subtotal</span>
              <span>${subtotal}</span>
            </div>
            <div className="flex justify-between text-red-500">
              <span>Discount (-{cartState.discount}%)</span>
              <span>-${discountAmount}</span>
            </div>
            <div className="flex justify-between">
              <span>Delivery Fee</span>
              <span>${deliveryFee}</span>
            </div>
            <div className="flex justify-between font-bold text-lg pt-2 border-t">
              <span>Total</span>
              <span>${total}</span>
            </div>
          </div>
          
          <div className="mt-4 flex">
            <input
              type="text"
              placeholder="Add promo code"
              value={promoCode}
              onChange={(e) => setPromoCode(e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button
              onClick={handleApplyPromo}
              className="px-4 py-2 bg-black text-white rounded-r-lg hover:bg-gray-800"
            >
              Apply
            </button>
          </div>
          
          <button className="w-full mt-4 bg-black text-white py-3 rounded-lg hover:bg-gray-800 font-medium">
            Go to Checkout →
          </button>
        </div>
      )}
    </div>
  );
};

// Main Content Component
const MainContent = () => {
  return (
    <main className="container mx-auto px-4 md:px-8 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2">
          <ProductList />
        </div>
        <CartList />
      </div>
    </main>
  );
};

// Main App Component with Proper Provider Wrapping
export default function App() {
  return (
    <ProductsProvider>
      <CartProvider>
        <div className="min-h-screen bg-gray-50">
          <MainContent />
        </div>
      </CartProvider>
    </ProductsProvider>
  );
}